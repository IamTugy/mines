{"version":3,"sources":["utils/boardUtils.js","features/board/boardSlice.js","features/additionalData/additionalInfoSlice.js","utils/TimeUtils.js","components/TopInfo/AbstractInfoButton.jsx","components/TopInfo/Flags/Flags.jsx","components/TopInfo/Timer/Timer.jsx","components/TopInfo/SupermanMode/SupermanMode.jsx","components/TopInfo/RePlay/RePlay.jsx","components/TopInfo/index.js","components/ChooseBoard/BoardOption/BoardOption.jsx","components/ChooseBoard/index.jsx","components/Board/Cell/Cell.jsx","components/Board/Board.jsx","app/App.jsx","app/rootReducer.js","app/store.js","index.js"],"names":["randomBomb","bombAmount","cellsAmount","randomeSeed","excecuteActionOnNearCells","x","y","height","width","board","action","i","Math","max","min","j","generateBoard","randomSeedKey","seedrandom","bombsPlaced","passedCells","newBoard","Array","getInitializedCell","isBomb","closeBombs","addCloseBombs","gameWon","gameLost","gameOnConfigurations","gameRunning","gameFinalStates","getInitialState","seed","cellsContent","boardHeight","boardWidth","totalFlagsAmount","usedFlagsAmount","gameState","isFlagMode","hasFlag","isSelected","Flag","Bomb","Number","Empty","getCellType","cellData","isSupermanMode","displayCell","state","payload","exposeStack","currentCellType","push","length","currCellData","shift","exposeNearCells","boardSlice","createSlice","name","devTools","initialState","random","reducers","createBoard","flagAmount","bombsDetected","setIsFlagMode","resetBoard","handleUserClick","cellContent","isFlagAdded","isGameWon","toggleFlag","actions","dafaultPlayerName","bestScores","gameBeginningTime","gameMode","playerName","additionalDataSlice","startGame","moment","toISOString","endGame","defaultValue","lodash","defaults","time","calculateDiffToNow","setSupermanMode","changePlayerName","includes","beginningTime","duration","diff","asMilliseconds","getTimerAsText","ms","utc","format","InfoButtonWrapper","styled","div","InfoButton","onClick","children","MainWrapper","RowWrapper","FlagAmountWrapper","CommenttWrapper","Flags","useSelector","shallowEqual","style","color","TextWrapper","TimerDisplay","useState","timerMs","setTimerMs","additionalData","useEffect","timerInterval","setInterval","clearInterval","Timer","SupermanMode","dispatch","useDispatch","fontSize","RePlay","TopInfoBarWrapper","TopInfoBar","BoardOptionWrapper","props","isClickable","CustomOptionWrapper","BoardContentWrapper","InputText","input","isTextValid","NumericStyledInput","onChangeHandler","setIsTextValid","onChange","event","str","newValue","target","value","isValueValid","isInteger","toNumber","parseInt","stopPropagation","BestScore","bestScore","setBestScore","minTimeScore","minBy","obj","marginRight","CastumBoardOption","setHeight","setWidth","setFlagAmount","fullGameMode","backgroundColor","BoardOption","modeName","ChooseBoardWrapper","BoardRowWrapper","PlayerNameInput","prevPlayerName","setPlayerName","TextField","label","ChooseBoard","marginBottom","CellWrapper","CellBackground","cellType","CellContent","type","number","Cell","setCellType","isCellSelected","setIsCellSelected","closedBombs","setClosedBombs","BoardWeapper","cellRenderer","columnIndex","rowIndex","Board","cellSize","useDimensions","ref","columnCount","rowCount","columnWidth","rowHeight","outline","borderWidth","MainPage","App","TopInfo","persistConfig","key","storage","rootReducer","combineReducers","persistReducer","additionalDataReducer","boardReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","immutableCheck","persistor","persistStore","pressHandler","isKeyPressed","getState","window","addEventListener","require","default","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.a3809126.chunk.js","sourcesContent":["import seedrandom from 'seedrandom';\n\nimport { getInitializedCell, getCellType, Empty } from '../features/board/boardSlice';\n\nconst randomBomb = ({bombAmount, cellsAmount, randomeSeed}) => {\n  return (randomeSeed() < (bombAmount / cellsAmount));\n};\n\nconst excecuteActionOnNearCells = (x, y, height, width, board, action) => {\n  for( let i = Math.max(0, x-1); i <= Math.min(height-1, x+1); i++) {\n    for( let j = Math.max(0, y-1); j <= Math.min(width-1, y+1); j++) {\n      action(i, j, board);\n    }\n  }\n};\n\nconst addCloseBombs = ( height, width, board ) => {\n  /** Add the amount of boms closed to the cell in all the board **/\n  const action = (i, j, board) => board[i][j].closeBombs += 1;\n  for( let x = 0; x < height; x++) {\n    for( let y = 0; y < width; y++) {\n      if (board[x][y].isBomb) {\n        /** add bomb counter to relatives **/\n        excecuteActionOnNearCells(x, y, height, width, board, action);\n      }\n    }\n  }\n};\n\nexport const generateBoard = ({ height, width, bombAmount, randomSeedKey }) => {\n  /** Generate a board with only bombs **/\n  const randomeSeed = new seedrandom(randomSeedKey);\n  let bombsPlaced = 0;\n  let passedCells = 0; \n  let newBoard = new Array(height);\n  for( let i = 0; i < height; i++) {\n    newBoard[i] = new Array(width);\n    for( let j = 0; j < width; j++) {\n      newBoard[i][j] = getInitializedCell();\n      const isBomb = randomBomb({\n        bombAmount: bombAmount - bombsPlaced,\n        cellsAmount: height * width - passedCells,\n        randomeSeed\n      });\n      newBoard[i][j].isBomb = isBomb;\n      bombsPlaced += isBomb ? 1 : 0;\n      passedCells += 1;\n    }\n  }\n\n  /** Add closeBombs number **/\n  addCloseBombs(height, width, newBoard);\n\n  return newBoard;\n};\n\nexport const exposeNearCells = ({ x, y, height, width, board }) => {\n  const exposeStack = [[x, y]];\n\n  const action = (i, j, board) => {\n    const cellData = board[i][j];\n    const currentCellType = getCellType(cellData, true);\n    if (!cellData.isSelected && (currentCellType === Empty)) {\n        exposeStack.push([i, j]);\n      }\n      cellData.isSelected = !cellData.hasFlag;\n  }\n  \n  while (exposeStack.length > 0) {\n    const [x, y] = exposeStack[0];\n    const currCellData = board[x][y];\n    currCellData.isSelected = !currCellData.hasFlag;\n    const cellType = getCellType(currCellData, true);\n    if (cellType === Empty) {\n      excecuteActionOnNearCells(x, y, height, width, board, action);\n      }\n    exposeStack.shift();\n  }\n};","import { createSlice } from '@reduxjs/toolkit';\nimport { generateBoard, exposeNearCells } from '../../utils/boardUtils';\n\nexport const gameWon = 'win';\nexport const gameLost = 'lose';\nexport const gameOnConfigurations = 'onConfigurations';\nexport const gameRunning = 'running';\n\nexport const gameFinalStates = [gameWon, gameLost];\n\nconst getInitialState = (seed) => {\n  return {\n    /** The content of the board, two dimentional list of all the data **/\n    cellsContent: null,\n    boardHeight: null,\n    boardWidth: null,\n    totalFlagsAmount: 0,\n    usedFlagsAmount: 0,\n    gameState: gameOnConfigurations,\n    isFlagMode: false,\n    randomSeedKey: seed,\n  }\n};\n\nexport const getInitializedCell = () => {\n  return {\n    isBomb: false,\n    hasFlag: false,\n    closeBombs: 0,\n    isSelected: false,\n  }\n};\n\nexport const Flag = \"flag\";\nexport const Bomb = \"bomb\";\nexport const Number = \"number\";\nexport const Empty = \"empty\";\n\nexport const getCellType = (cellData, isSupermanMode) => {\n  return cellData.hasFlag ? Flag : ((cellData.isSelected || isSupermanMode) ? (cellData.isBomb ? Bomb : ((cellData.closeBombs > 0) ? Number : Empty)) : Empty);\n};\n\nconst toggleFlag = (state, action) => {\n  const { x, y } = action.payload\n  const cellContent = state.cellsContent[x][y];\n  const isFlagAdded = !cellContent.hasFlag;\n\n  /** if removing a flag or if there are flags left to put another **/\n  if ( !isFlagAdded || state.usedFlagsAmount < state.totalFlagsAmount ) {\n\n    if (cellContent.isBomb) {\n      state.bombsDetected += isFlagAdded ? 1 : -1;\n    }\n\n    const isGameWon = state.bombsDetected === state.totalFlagsAmount;\n    state.gameState = isGameWon ? gameWon : gameRunning;\n    cellContent.hasFlag = isFlagAdded;\n    state.usedFlagsAmount = state.usedFlagsAmount + (isFlagAdded ? 1 : -1);\n  }\n};\n\nconst displayCell = (state, action) => {\n  const { x, y } = action.payload;\n  const {isBomb, hasFlag} = state.cellsContent[x][y];\n\n  if (hasFlag) return;\n\n  if (isBomb) {\n    state.cellsContent[x][y].isSelected = true;\n    state.gameState = gameLost;\n    return;\n  }\n\n  exposeNearCells({\n    x, y, \n    height: state.boardHeight, \n    width: state.boardWidth,\n    board: state.cellsContent\n  });\n};\n\n\nconst boardSlice = createSlice({\n  name: 'board',\n  devTools: false,\n  initialState: getInitialState(Math.random()),\n  reducers: {\n    createBoard: (state, action) => {\n      const { height, width, flagAmount } = action.payload;\n\n      state.gameState = gameRunning;\n      state.boardHeight = height;\n      state.boardWidth = width;\n      state.totalFlagsAmount = flagAmount;\n      state.usedFlagsAmount = 0;\n      state.bombsDetected = 0;\n      state.cellsContent = generateBoard({ height, width, bombAmount: flagAmount, randomSeedKey: state.randomSeedKey});\n    },\n\n    setIsFlagMode: (state, action) => {\n      state.isFlagMode = action.payload;\n    },\n\n    resetBoard: (state, action) => {\n      return getInitialState(Math.random());\n    },\n\n    handleUserClick: (state, action) => {\n      if (state.isFlagMode) {\n        toggleFlag(state, action);\n      } else {\n        displayCell(state, action);\n      }\n    }\n  }\n})\n\nexport const {\n  createBoard,\n  resetBoard,\n  setIsFlagMode,\n  handleUserClick\n} = boardSlice.actions;\n\nexport default boardSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\nimport moment from 'moment';\nimport lodash from 'lodash';\n\nimport { calculateDiffToNow } from '../../utils/TimeUtils';\n\nexport const dafaultPlayerName = 'Unknown';\n\nconst initialState = {\n  /** Previus games best score **/\n  bestScores: {},\n  gameBeginningTime: null,\n  isSupermanMode: false,\n  gameMode: null,\n  playerName: dafaultPlayerName,\n};\n\nconst additionalDataSlice = createSlice({\n  name: 'additionalData',\n  initialState,\n  reducers: {\n    startGame(state, action) {\n      const { gameMode } = action.payload\n      state.isSupermanMode = false;\n      state.gameMode = gameMode;\n      state.gameBeginningTime = moment().toISOString();\n    },\n\n    endGame(state, action) {\n      const { isGameWon } = action.payload\n      if (isGameWon) {\n        const defaultValue = {}\n        defaultValue[state.gameMode] = [];\n        const bestScores = lodash.defaults(state.bestScores, defaultValue)\n        bestScores[state.gameMode].push({ playerName: state.playerName, time: calculateDiffToNow(moment(state.gameBeginningTime)) })\n        state.bestScores = bestScores;\n      }\n    },\n\n    setSupermanMode(state, action) {\n      const { isSupermanMode } = action.payload\n      state.isSupermanMode = isSupermanMode;\n    },\n\n    changePlayerName(state, action) {\n      const playerName = action.payload;\n      state.playerName = [null, \"\"].includes(playerName) ? dafaultPlayerName : playerName;\n    }\n  }\n})\n\nexport const {\n  startGame,\n  endGame,\n  setSupermanMode,\n  changePlayerName\n} = additionalDataSlice.actions;\n\nexport default additionalDataSlice.reducer;","import moment from 'moment';\n\n\nexport const calculateDiffToNow = beginningTime => {\n  /** Return ms diff between the beginning and now **/\n  return moment.duration(moment().diff(beginningTime)).asMilliseconds();\n};\n\nexport const getTimerAsText = ms => {\n  return ms && moment.utc(ms).format('HH:mm:ss');\n};","import React from 'react';\nimport styled from 'styled-components';\n\nconst InfoButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n\n  height: 100px;\n  min-width: 250px;\n  border-radius: 20px;\n  font-size: 40px;\n  background-color: #c2c2c2;\n\n  margin: 20px;\n  padding-right: 15px; \n  padding-left: 15px;\n`;\n\nexport const InfoButton = ({ onClick, children }) => {\n  return (\n    <InfoButtonWrapper onClick={onClick}>\n      {children}\n    </InfoButtonWrapper>\n  )\n};\n\nexport default InfoButton;","import React from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport InfoButton from '../AbstractInfoButton';\nimport { gameWon } from '../../../features/board/boardSlice';\nimport { FaFlag } from 'react-icons/fa';\n\nconst MainWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst RowWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst FlagAmountWrapper = styled.div`\n  margin-left: 10px;\n`;\n\nconst CommenttWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  font-size: 15px;\n  color: #5a5a5a;\n`;\n\nconst Flags = () => {\n  const [totalFlagsAmount, usedFlagsAmount, gameState] = useSelector(\n    state => [\n      state.board.totalFlagsAmount, \n      state.board.usedFlagsAmount, \n      state.board.gameState\n    ], shallowEqual);\n\n  return (\n      <InfoButton>\n        <MainWrapper>\n          <RowWrapper>\n            <FaFlag \n              style={{ color: (gameState === gameWon) ? \"green\" : (usedFlagsAmount === totalFlagsAmount) && \"red\"}}\n            />\n            <FlagAmountWrapper>\n              {`${usedFlagsAmount}/${totalFlagsAmount}`}\n            </FlagAmountWrapper>\n          </RowWrapper>\n          <CommenttWrapper>\n            {`Shift+LeftClick for Flag`}\n          </CommenttWrapper>\n        </MainWrapper>\n      </InfoButton>\n  )\n}\n\nexport default Flags;","import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport moment from 'moment';\nimport styled from 'styled-components';\n\nimport { calculateDiffToNow, getTimerAsText} from '../../../utils/TimeUtils';\nimport InfoButton from '../AbstractInfoButton';\nimport { gameFinalStates } from '../../../features/board/boardSlice';\n\nimport { FaStopwatch } from 'react-icons/fa';\n\nconst TextWrapper = styled.div`\n  margin-left: 10px;\n`;\n\nconst TimerDisplay = ({gameState}) => {\n  const [timerMs, setTimerMs] = useState(null);\n  const gameBeginningTime = useSelector(state => state.additionalData.gameBeginningTime);\n\n\n  useEffect(() => {\n    const timerInterval = setInterval(() => {\n      if (!gameFinalStates.includes(gameState)) {\n        setTimerMs(calculateDiffToNow(moment(gameBeginningTime)));\n      }\n    }, 1000);\n    return () => {\n      clearInterval(timerInterval);\n    }\n  }, [gameBeginningTime, gameState]);\n\n  return (\n    <TextWrapper>\n      {timerMs ? getTimerAsText(timerMs) : null}\n    </TextWrapper>\n  )\n}\n\nconst Timer = () => {\n  const gameState = useSelector(state => state.board.gameState);\n\n  return (\n      <InfoButton>\n        <FaStopwatch \n          style={{ color: gameFinalStates.includes(gameState) && \"red\"}}\n        />\n        <TimerDisplay gameState={gameState}/>\n      </InfoButton>\n  )\n}\n\nexport default Timer;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { setSupermanMode } from '../../../features/additionalData/additionalInfoSlice';\nimport InfoButton from '../AbstractInfoButton';\nimport { FaMask } from 'react-icons/fa';\n\n\nconst SupermanMode = () => {\n  const isSupermanMode = useSelector(state => state.additionalData.isSupermanMode);\n  const dispatch = useDispatch();\n\n  return (\n      <InfoButton \n        onClick={() => dispatch(setSupermanMode({ isSupermanMode: !isSupermanMode }))}\n      >\n        <FaMask style={{ \n          color: isSupermanMode && \"red\",\n          fontSize: \"80px\"}}\n        />\n      </InfoButton>\n  )\n}\n\nexport default SupermanMode;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { gameFinalStates, resetBoard } from '../../../features/board/boardSlice';\nimport InfoButton from '../AbstractInfoButton';\nimport { FaReply } from 'react-icons/fa';\n\n\nconst RePlay = () => {\n  const gameState = useSelector(state => state.board.gameState)\n  const dispatch = useDispatch();\n\n  return (\n      <InfoButton \n        onClick={() => dispatch(resetBoard())}\n      >\n        <FaReply style={{ \n          color: gameFinalStates.includes(gameState) && \"red\",\n          fontSize: \"60px\"}}\n        />\n      </InfoButton>\n  )\n}\n\nexport default RePlay;","import React from 'react';\nimport styled from 'styled-components';\n\nimport Flags from './Flags/Flags';\nimport Timer from './Timer/Timer';\nimport SupermanMode from './SupermanMode/SupermanMode';\nimport RePlay from './RePlay/RePlay';\n\nconst TopInfoBarWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n\n  width: 100%;\n`;\n\nexport const TopInfoBar = () => {\n  return (\n    <TopInfoBarWrapper>\n      <SupermanMode/>\n      <Timer/>\n      <Flags/>\n      <RePlay/>\n    </TopInfoBarWrapper>\n  )\n}\n\nexport default TopInfoBar;","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport lodash from 'lodash';\n\nimport { FaFlag, FaBorderAll, FaTrophy, FaChild } from 'react-icons/fa';\n\nimport { createBoard } from '../../../features/board/boardSlice';\nimport { startGame } from '../../../features/additionalData/additionalInfoSlice';\nimport { getTimerAsText } from '../../../utils/TimeUtils';\n\nconst BoardOptionWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  cursor: ${props => props.isClickable && \"pointer\" };\n\n  height: 125px;\n  width: 300px;\n  border-radius: 20px;\n  font-size: 20px;\n  background-color: #c2c2c2;\n\n  margin: 10px;\n`;\n\nconst CustomOptionWrapper = styled(BoardOptionWrapper)`\n  width: 400px;\n`;\n\nconst BoardContentWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-around;\n  padding-top: 2px;\n  margin: 2px;\n`;\n\nconst InputText = styled.input`\n  height: 20px;\n  width: 50px;\n  background-color: white;\n  outline: none;\n  border-width: 0;\n  border-radius: 5px;\n  text-align: center;\n  margin-left: 5px;\n  margin-right: 5px;\n  color: ${props => props.isTextValid ? 'black' : 'red'};\n`;\n\nconst isPositiveNumber = str => Number.isInteger(lodash.toNumber(str)) && parseInt(str) > 0;\n\nconst NumericStyledInput = ({ onChangeHandler }) => {\n  const [isTextValid, setIsTextValid] = useState(true);\n\n  const onChange = event => {\n    const newValue = event.target.value;\n    const isValueValid = isPositiveNumber(newValue) || [\"\", null].includes(newValue);\n    setIsTextValid(isValueValid);\n    if ( isValueValid ) {\n      onChangeHandler(parseInt(newValue));\n    } else {\n      onChangeHandler(null);\n    }\n  }\n\n  return (\n    <InputText \n      onChange={onChange} \n      isTextValid={isTextValid}\n      onClick={event => event.stopPropagation()}\n    />\n  )\n} \n\nconst BestScore = ({ gameMode }) => {\n  const bestScores = useSelector(state => state.additionalData.bestScores[gameMode]);\n  const [bestScore, setBestScore] = useState(null);\n\n  useEffect(() => {\n    const minTimeScore = lodash.minBy(bestScores, (obj) => obj.time);\n    setBestScore(minTimeScore);\n  }, [bestScores])\n\n  return (\n    bestScore ? \n      (<BoardContentWrapper>\n        <FaTrophy style={{ marginRight: \"5px\" }}/>\n        { getTimerAsText(bestScore.time) }\n        <div style={{ width: \"20px\" }}/>\n        <FaChild/>\n        { bestScore.playerName }\n      </BoardContentWrapper>) : null\n  )\n\n}\n\nexport const CastumBoardOption = () => {\n  const dispatch = useDispatch();\n  const [height, setHeight] = useState(null);\n  const [width, setWidth] = useState(null);\n  const [flagAmount, setFlagAmount] = useState(null);\n  const modeName = 'Custom Mode';\n  const fullGameMode = `${modeName} ${height}X${width}/${flagAmount}`;\n  const isClickable = height && width && flagAmount;\n  \n  return (\n    <CustomOptionWrapper \n      isClickable={isClickable}\n      onClick={() => {\n      if ( isClickable )\n        dispatch(createBoard({height, width, flagAmount}));\n        dispatch(startGame({ gameMode: fullGameMode}));\n      }}\n      style={{ backgroundColor: isClickable && \"#a8d0a8\" }}\n    >\n      {\"Custom Mode\"}\n      <BoardContentWrapper>\n        <FaFlag/>\n        <NumericStyledInput onChangeHandler={setFlagAmount}/>\n        <div style={{ width: \"20px\" }}/>\n        <FaBorderAll/>\n        <NumericStyledInput onChangeHandler={setHeight}/>\n        {'X'}\n        <NumericStyledInput onChangeHandler={setWidth}/>\n      </BoardContentWrapper>\n      <BestScore gameMode={fullGameMode}/>\n    </CustomOptionWrapper>\n  )\n}\n\nconst BoardOption = ({ modeName, height, width, flagAmount }) => {\n  const dispatch = useDispatch();\n  const fullGameMode = `${modeName} ${height}X${width}/${flagAmount}`;\n\n  return (\n    <BoardOptionWrapper \n      isClickable\n      onClick={() => {\n        dispatch(createBoard({height, width, flagAmount}));\n        dispatch(startGame({ gameMode: fullGameMode }));\n      }}\n    >\n      {modeName}\n      <BoardContentWrapper>\n        <FaFlag style={{ marginRight: \"5px\" }}/>\n        {flagAmount}\n        <div style={{ width: \"20px\" }}/>\n        <FaBorderAll style={{ marginRight: \"5px\" }}/>\n        {`${height} X ${width}`}\n      </BoardContentWrapper>\n      <BestScore gameMode={fullGameMode}/>\n    </BoardOptionWrapper>\n  )\n}\n\nexport default BoardOption;","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport TextField from '@material-ui/core/TextField';\n\nimport BoardOption, { CastumBoardOption } from './BoardOption/BoardOption';\nimport { changePlayerName } from '../../features/additionalData/additionalInfoSlice';\n\nconst ChooseBoardWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  margin: auto;\n`;\n\nconst BoardRowWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n`;\n\nconst PlayerNameInput = () => {\n  const prevPlayerName = useSelector(state => state.additionalData.playerName);\n  const [playerName, setPlayerName] = useState(prevPlayerName);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (playerName !== prevPlayerName){\n      dispatch(changePlayerName(playerName));\n    }\n  }, [dispatch, playerName, prevPlayerName])\n\n  return (\n    <TextField \n      label=\"Player Name\" \n      defaultValue={prevPlayerName}\n      onChange={event => {setPlayerName(event.target.value)}}\n    />\n  )\n\n}\n\nexport const ChooseBoard = () => {\n  return (\n    <ChooseBoardWrapper>\n      <BoardRowWrapper style={{ marginBottom: '20px' }}>\n        <PlayerNameInput/>\n      </BoardRowWrapper>\n      <BoardRowWrapper>\n        <BoardOption \n          modeName='Child Mode'\n          height={10}\n          width={20}\n          flagAmount={15}\n        />\n        <BoardOption \n          modeName=\"'Trust me im good' Mode\"\n          height={40}\n          width={30}\n          flagAmount={250}\n        />\n      </BoardRowWrapper>\n      <BoardRowWrapper>\n        <BoardOption \n          modeName='Challenge Mode'\n          height={300}\n          width={300}\n          flagAmount={10000}\n        />\n        <BoardOption \n          modeName='Check my limits Mode'\n          height={1000}\n          width={1000}\n          flagAmount={110000}\n        />\n      </BoardRowWrapper>\n      <BoardRowWrapper>\n        <CastumBoardOption/>\n      </BoardRowWrapper>\n    </ChooseBoardWrapper>\n  )\n}\n\nexport default ChooseBoard;","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport styled from 'styled-components';\nimport { FaBomb, FaFlag } from 'react-icons/fa';\n\nimport { \n    gameFinalStates, Flag, Bomb, Number, Empty, \n    getCellType, gameWon, handleUserClick \n} from '../../../features/board/boardSlice';\n\nconst selectedColor = \"#dedede\";\nconst shownUnselectedColor = \"#757575\";\nconst unselectedColor = \"#c1c1c1\";\n\n\nconst CellWrapper = styled.div`\n    display: flex;\n`;\n\n\nconst CellBackground = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: calc(100% - 5px);\n  height: calc(100% - 5px);\n  background-color: ${props => ((props.isSelected || (props.gameState === gameWon)) ? selectedColor : ((props.isSupermanMode || gameFinalStates.includes(props.gameState)) ? shownUnselectedColor : unselectedColor))};\n  border-radius: 20%;\n  cursor: ${props => (props.isSelected || gameFinalStates.includes(props.gameState)) ? 'default' : 'pointer'};\n\n  color: ${props => ((props.cellType === Bomb) && props.isSelected) ? \"red\" : \"black\"};\n  font-size: 25px;\n  margin: auto;\n`;\n\n\nconst CellContent = ({type, number}) => {\n    switch (type) {\n        case Flag:\n            return <FaFlag/>;\n        \n        case Bomb:\n            return <FaBomb/>;\n\n        case Number:\n            return (<div>{number}</div>);\n\n        default:\n            return <div/>;\n    }\n} \n\n\nconst Cell = ({ x, y, style }) => {\n    const cellData = useSelector(state => state.board.cellsContent[x][y], shallowEqual);\n    const gameState = useSelector(state => state.board.gameState);\n    const isSupermanMode = useSelector(state => state.additionalData.isSupermanMode);\n    const dispatch = useDispatch();\n\n    const [cellType, setCellType] = useState(Empty);\n    const [isCellSelected, setIsCellSelected] = useState(false);\n    const [closedBombs, setClosedBombs] = useState(Empty);\n\n    useEffect(() => {\n        setIsCellSelected(cellData.isSelected);\n        setClosedBombs(cellData.closeBombs);\n        setCellType(getCellType(cellData, (isSupermanMode || gameFinalStates.includes(gameState))));\n    }, [cellData, isSupermanMode, gameState])\n\n    const handleClick = () => {\n        if (!isCellSelected && !gameFinalStates.includes(gameState)) {\n            dispatch(handleUserClick({x, y}));\n        }\n    }\n\n    return (\n        <CellWrapper style={style}>\n            <CellBackground \n                isSelected={isCellSelected}\n                gameState={gameState}\n                cellType={cellType}\n                isSupermanMode={ isSupermanMode}\n                onClick={handleClick}\n            >\n                <CellContent \n                    type={cellType} \n                    number={closedBombs}\n                />\n            </CellBackground>\n        </CellWrapper>\n    )\n}\n\nexport default Cell;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Grid } from 'react-virtualized';\nimport styled from 'styled-components';\nimport useDimensions from \"react-use-dimensions\";\n\nimport Cell from './Cell/Cell';\n\nconst BoardWeapper = styled.div`\n  display: flex;\n  flex: 6;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst cellRenderer = ({ columnIndex, rowIndex, style }) => {\n  return (\n    <Cell \n      x={rowIndex}\n      y={columnIndex}\n      key={`cell-${rowIndex}-${columnIndex}`}\n      style={style}\n    />);\n}\n\n\nconst Board = ({ cellSize }) => {\n  const [ref, { width, height }] = useDimensions();\n\n  const boardHeight = useSelector(state => state.board.boardHeight);\n  const boardWidth = useSelector(state => state.board.boardWidth);\n\n  return (\n    <BoardWeapper ref={ref}>\n      <Grid\n        cellRenderer={cellRenderer}\n        columnCount={boardWidth}\n        rowCount={boardHeight}\n        columnWidth={cellSize}\n        rowHeight={cellSize}\n        height={ Math.min(cellSize * boardHeight, height ?? 0) }\n        width={ Math.min(cellSize * boardWidth + 20, width ?? 0) }\n        style={{ outline: 'none', borderWidth: 0 }}\n      />\n    </BoardWeapper>\n  );\n}\n\nexport default Board;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { endGame } from '../features/additionalData/additionalInfoSlice';\nimport { gameFinalStates, gameWon, gameOnConfigurations } from '../features/board/boardSlice';\nimport TopInfoBar from '../components/TopInfo';\nimport ChooseBoard from '../components/ChooseBoard/index';\nimport Board from '../components/Board/Board';\nconst MainPage = styled.div`\n  display: flex;\n  flex-direction: column;\n  user-select: none;\n  \n  height: 100%;\n  width: 100%;\n`;\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const gameState = useSelector(state => state.board.gameState);\n\n  useEffect(() => {\n    if (gameFinalStates.includes(gameState)) {\n      dispatch(endGame({ isGameWon: gameState === gameWon }));\n    }\n  }, [dispatch, gameState])\n\n  return (\n    <MainPage>\n      {\n      (gameState === gameOnConfigurations) ? <ChooseBoard/> :\n      <>\n        <TopInfoBar/>\n        <Board\n          cellSize={50}\n        />\n      </>\n    }\n    </MainPage>\n  );\n}\n\nexport default App;\n","import { combineReducers } from '@reduxjs/toolkit';\nimport additionalDataReducer from '../features/additionalData/additionalInfoSlice';\nimport boardReducer from '../features/board/boardSlice';\nimport { persistReducer} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\n\nexport const rootReducer = combineReducers({\n  additionalData: persistReducer(persistConfig, additionalDataReducer),\n  board: boardReducer\n});\n\nexport default rootReducer;","import { configureStore } from '@reduxjs/toolkit';\nimport { persistStore } from 'redux-persist';\n\nimport rootReducer from './rootReducer';\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: false,\n      immutableCheck: false,\n    })\n});\n\nexport const persistor = persistStore(store);\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./rootReducer', () => {\n    const newRootReducer = require('./rootReducer').default;\n    store.replaceReducer(newRootReducer);\n  })\n}\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport store, { persistor } from './app/store'\nimport { setIsFlagMode } from './features/board/boardSlice';\n\nimport './index.css';\n\nconst targetKey = 'Shift'\n\nconst pressHandler = ( key, isKeyPressed) => {\n  if (key === targetKey) {\n    const state = store.getState();\n    if (state.board.isFlagMode !== isKeyPressed) {\n      store.dispatch(setIsFlagMode(isKeyPressed));\n    }\n  }\n};\n\nwindow.addEventListener('keydown', (event) => pressHandler(event.key, true));\nwindow.addEventListener('keyup', (event) => pressHandler(event.key, false));\n\nconst render = () => {\n  const App = require('./app/App').default\n\n  ReactDOM.render(\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>,\n    document.getElementById('root')\n  )\n}\n\nrender()\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./app/App', render)\n}"],"sourceRoot":""}