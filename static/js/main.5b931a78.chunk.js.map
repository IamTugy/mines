{"version":3,"sources":["utils/boardUtils.js","features/board/boardSlice.js","components/TopInfo/AbstractInfoButton.jsx","components/TopInfo/Flags/Flags.jsx","components/TopInfo/Timer/Timer.jsx","components/TopInfo/SupermanMode/SupermanMode.jsx","components/TopInfo/RePlay/RePlay.jsx","components/TopInfo/index.js","components/ChooseBoard/BoardOption/BoardOption.jsx","components/ChooseBoard/index.jsx","components/Board/Cell/Cell.jsx","components/Board/Board.jsx","components/GameEndedDialog.jsx","app/App.jsx","app/rootReducer.js","app/store.js","index.js","features/additionalData/additionalInfoSlice.js","utils/TimeUtils.js"],"names":["randomBomb","bombAmount","cellsAmount","randomeSeed","excecuteActionOnNearCells","x","y","height","width","board","action","i","Math","max","min","j","generateBoard","randomSeedKey","seedrandom","bombsPlaced","passedCells","newBoard","Array","getInitializedCell","isBomb","addBombsToNearCellsCounter","closeBombs","addCloseBombs","gameWon","gameLost","gameOnConfigurations","gameRunning","gameFinalStates","getInitialState","seed","cellsContent","boardHeight","boardWidth","totalFlagsAmount","usedFlagsAmount","gameState","isFlagMode","hasFlag","isSelected","Flag","Bomb","Number","Empty","getCellType","cellData","isSupermanMode","displayCell","state","payload","exposeStack","exposeCell","currentCellType","push","length","currCellData","shift","exposeNearCells","boardSlice","createSlice","name","devTools","initialState","random","reducers","createBoard","flagAmount","bombsDetected","setIsFlagMode","resetBoard","handleUserClick","cellContent","isFlagAdded","isGameWon","toggleFlag","actions","InfoButtonWrapper","styled","div","InfoButton","onClick","children","MainWrapper","RowWrapper","FlagAmountWrapper","CommenttWrapper","Flags","useSelector","shallowEqual","style","color","TextWrapper","TimerDisplay","useState","timerMs","setTimerMs","gameBeginningTime","additionalData","useEffect","timerInterval","setInterval","includes","calculateDiffToNow","moment","clearInterval","getTimerAsText","Timer","SupermanMode","dispatch","useDispatch","setSupermanMode","fontSize","RePlay","TopInfoBarWrapper","TopInfoBar","BoardOptionWrapper","props","isClickable","CustomOptionWrapper","BoardContentWrapper","InputText","input","isTextValid","NumericStyledInput","onChangeHandler","setIsTextValid","onChange","event","str","newValue","target","value","isValueValid","isInteger","lodash","toNumber","parseInt","stopPropagation","BestScore","gameMode","bestScores","bestScore","setBestScore","minTimeScore","minBy","obj","time","marginRight","playerName","CastumBoardOption","setHeight","setWidth","setFlagAmount","fullGameMode","startGame","backgroundColor","BoardOption","modeName","ChooseBoardWrapper","BoardRowWrapper","PlayerNameInput","prevPlayerName","setPlayerName","changePlayerName","TextField","label","defaultValue","ChooseBoard","marginBottom","CellWrapper","CellBackground","cellType","CellContent","type","number","Cell","setCellType","isCellSelected","setIsCellSelected","closedBombs","setClosedBombs","BoardWeapper","cellRenderer","columnIndex","rowIndex","Board","cellSize","useDimensions","ref","columnCount","rowCount","columnWidth","rowHeight","outline","borderWidth","DialogWrapper","DialogContentTextWrapper","ButtonsRow","GameEndedDialog","React","open","setOpen","Dialog","onClose","DialogTitle","Button","margin","MainPage","App","endGame","TopInfo","persistConfig","key","storage","rootReducer","combineReducers","persistReducer","additionalDataReducer","boardReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","immutableCheck","persistor","persistStore","pressHandler","isKeyPressed","getState","window","addEventListener","require","default","ReactDOM","render","loading","document","getElementById","dafaultPlayerName","additionalDataSlice","toISOString","defaults","beginningTime","duration","diff","asMilliseconds","ms","utc","format"],"mappings":"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","file":"static/js/main.5b931a78.chunk.js","sourcesContent":["import seedrandom from 'seedrandom';\n\nimport { getInitializedCell, getCellType, Empty } from '../features/board/boardSlice';\n\nconst randomBomb = ({bombAmount, cellsAmount, randomeSeed}) => {\n  return (randomeSeed() < (bombAmount / cellsAmount));\n};\n\nconst excecuteActionOnNearCells = (x, y, height, width, board, action) => {\n  for( let i = Math.max(0, x-1); i <= Math.min(height-1, x+1); i++) {\n    for( let j = Math.max(0, y-1); j <= Math.min(width-1, y+1); j++) {\n      action(i, j, board);\n    }\n  }\n};\n\nconst addCloseBombs = ( height, width, board ) => {\n  /** Add the amount of boms closed to the cell in all the board **/\n  const addBombsToNearCellsCounter = (i, j, board) => board[i][j].closeBombs += 1;\n  for( let x = 0; x < height; x++) {\n    for( let y = 0; y < width; y++) {\n      if (board[x][y].isBomb) {\n        /** add bomb counter to relatives **/\n        excecuteActionOnNearCells(x, y, height, width, board, addBombsToNearCellsCounter);\n      }\n    }\n  }\n};\n\nexport const generateBoard = ({ height, width, bombAmount, randomSeedKey }) => {\n  /** Generate a board with only bombs **/\n  const randomeSeed = new seedrandom(randomSeedKey);\n  let bombsPlaced = 0;\n  let passedCells = 0; \n  const newBoard = new Array(height);\n  for( let i = 0; i < height; i++) {\n    newBoard[i] = new Array(width);\n    for( let j = 0; j < width; j++) {\n      newBoard[i][j] = getInitializedCell();\n      const isBomb = randomBomb({\n        bombAmount: bombAmount - bombsPlaced,\n        cellsAmount: height * width - passedCells,\n        randomeSeed\n      });\n      newBoard[i][j].isBomb = isBomb;\n      bombsPlaced += isBomb ? 1 : 0;\n      passedCells += 1;\n    }\n  }\n\n  /** Add closeBombs number **/\n  addCloseBombs(height, width, newBoard);\n\n  return newBoard;\n};\n\nexport const exposeNearCells = ({ x, y, height, width, board }) => {\n  const exposeStack = [[x, y]];\n\n  const exposeCell = (i, j, board) => {\n    const cellData = board[i][j];\n    const currentCellType = getCellType(cellData, true);\n    if (!cellData.isSelected && (currentCellType === Empty)) {\n        exposeStack.push([i, j]);\n      }\n      cellData.isSelected = !cellData.hasFlag;\n  }\n  \n  while (exposeStack.length > 0) {\n    const [x, y] = exposeStack[0];\n    const currCellData = board[x][y];\n    currCellData.isSelected = !currCellData.hasFlag;\n    const cellType = getCellType(currCellData, true);\n    if (cellType === Empty) {\n      excecuteActionOnNearCells(x, y, height, width, board, exposeCell);\n      }\n    exposeStack.shift();\n  }\n};","import { createSlice } from '@reduxjs/toolkit';\nimport { generateBoard, exposeNearCells } from '../../utils/boardUtils';\n\nexport const gameWon = 'WON';\nexport const gameLost = 'LOST';\nexport const gameOnConfigurations = 'onConfigurations';\nexport const gameRunning = 'running';\n\nexport const gameFinalStates = [gameWon, gameLost];\n\nconst getInitialState = (seed) => {\n  return {\n    /** The content of the board, two dimentional list of all the data **/\n    cellsContent: null,\n    boardHeight: null,\n    boardWidth: null,\n    totalFlagsAmount: 0,\n    usedFlagsAmount: 0,\n    gameState: gameOnConfigurations,\n    isFlagMode: false,\n    randomSeedKey: seed,\n  }\n};\n\nexport const getInitializedCell = () => {\n  return {\n    isBomb: false,\n    hasFlag: false,\n    closeBombs: 0,\n    isSelected: false,\n  }\n};\n\nexport const Flag = \"flag\";\nexport const Bomb = \"bomb\";\nexport const Number = \"number\";\nexport const Empty = \"empty\";\n\nexport const getCellType = (cellData, isSupermanMode) => {\n  return cellData.hasFlag ? Flag : ((cellData.isSelected || isSupermanMode) ? (cellData.isBomb ? Bomb : ((cellData.closeBombs > 0) ? Number : Empty)) : Empty);\n};\n\nconst toggleFlag = (state, action) => {\n  const { x, y } = action.payload\n  const cellContent = state.cellsContent[x][y];\n  const isFlagAdded = !cellContent.hasFlag;\n\n  /** if removing a flag or if there are flags left to put another **/\n  if ( !isFlagAdded || state.usedFlagsAmount < state.totalFlagsAmount ) {\n\n    if (cellContent.isBomb) {\n      state.bombsDetected += isFlagAdded ? 1 : -1;\n    }\n\n    const isGameWon = state.bombsDetected === state.totalFlagsAmount;\n    state.gameState = isGameWon ? gameWon : gameRunning;\n    cellContent.hasFlag = isFlagAdded;\n    state.usedFlagsAmount = state.usedFlagsAmount + (isFlagAdded ? 1 : -1);\n  }\n};\n\nconst displayCell = (state, action) => {\n  const { x, y } = action.payload;\n  const {isBomb, hasFlag} = state.cellsContent[x][y];\n\n  if (hasFlag) return;\n\n  if (isBomb) {\n    state.cellsContent[x][y].isSelected = true;\n    state.gameState = gameLost;\n    return;\n  }\n\n  exposeNearCells({\n    x, y, \n    height: state.boardHeight, \n    width: state.boardWidth,\n    board: state.cellsContent\n  });\n};\n\n\nconst boardSlice = createSlice({\n  name: 'board',\n  devTools: false,\n  initialState: getInitialState(Math.random()),\n  reducers: {\n    createBoard: (state, action) => {\n      const { height, width, flagAmount } = action.payload;\n\n      state.gameState = gameRunning;\n      state.boardHeight = height;\n      state.boardWidth = width;\n      state.totalFlagsAmount = flagAmount;\n      state.usedFlagsAmount = 0;\n      state.bombsDetected = 0;\n      state.cellsContent = generateBoard({ height, width, bombAmount: flagAmount, randomSeedKey: state.randomSeedKey});\n    },\n\n    setIsFlagMode: (state, action) => {\n      state.isFlagMode = action.payload;\n    },\n\n    resetBoard: (state, action) => {\n      return getInitialState(Math.random());\n    },\n\n    handleUserClick: (state, action) => {\n      if (state.isFlagMode) {\n        toggleFlag(state, action);\n      } else {\n        displayCell(state, action);\n      }\n    }\n  }\n})\n\nexport const {\n  createBoard,\n  resetBoard,\n  setIsFlagMode,\n  handleUserClick\n} = boardSlice.actions;\n\nexport default boardSlice.reducer;","import React from 'react';\nimport styled from 'styled-components';\n\nconst InfoButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n\n  height: 100px;\n  min-width: 250px;\n  border-radius: 20px;\n  font-size: 40px;\n  background-color: #c2c2c2;\n\n  margin: 20px;\n  padding-right: 15px; \n  padding-left: 15px;\n`;\n\nexport const InfoButton = ({ onClick, children }) => {\n  return (\n    <InfoButtonWrapper onClick={onClick}>\n      {children}\n    </InfoButtonWrapper>\n  )\n};\n\nexport default InfoButton;","import React from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport InfoButton from '../AbstractInfoButton';\nimport { gameWon } from '../../../features/board/boardSlice';\nimport { FaFlag } from 'react-icons/fa';\n\nconst MainWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst RowWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst FlagAmountWrapper = styled.div`\n  margin-left: 10px;\n`;\n\nconst CommenttWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  font-size: 15px;\n  color: #5a5a5a;\n`;\n\nconst Flags = () => {\n  const [totalFlagsAmount, usedFlagsAmount, gameState] = useSelector(\n    state => [\n      state.board.totalFlagsAmount, \n      state.board.usedFlagsAmount, \n      state.board.gameState\n    ], shallowEqual);\n\n  return (\n      <InfoButton>\n        <MainWrapper>\n          <RowWrapper>\n            <FaFlag \n              style={{ color: (gameState === gameWon) ? \"green\" : (usedFlagsAmount === totalFlagsAmount) && \"red\"}}\n            />\n            <FlagAmountWrapper>\n              {`${usedFlagsAmount}/${totalFlagsAmount}`}\n            </FlagAmountWrapper>\n          </RowWrapper>\n          <CommenttWrapper>\n            {`Shift+LeftClick for Flag`}\n          </CommenttWrapper>\n        </MainWrapper>\n      </InfoButton>\n  )\n}\n\nexport default Flags;","import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport moment from 'moment';\nimport styled from 'styled-components';\n\nimport { calculateDiffToNow, getTimerAsText} from '../../../utils/TimeUtils';\nimport InfoButton from '../AbstractInfoButton';\nimport { gameFinalStates } from '../../../features/board/boardSlice';\n\nimport { FaStopwatch } from 'react-icons/fa';\n\nconst TextWrapper = styled.div`\n  margin-left: 10px;\n`;\n\nconst TimerDisplay = ({gameState}) => {\n  const [timerMs, setTimerMs] = useState(null);\n  const gameBeginningTime = useSelector(state => state.additionalData.gameBeginningTime);\n\n\n  useEffect(() => {\n    const timerInterval = setInterval(() => {\n      if (!gameFinalStates.includes(gameState)) {\n        setTimerMs(calculateDiffToNow(moment(gameBeginningTime)));\n      }\n    }, 1000);\n    return () => {\n      clearInterval(timerInterval);\n    }\n  }, [gameBeginningTime, gameState]);\n\n  return (\n    <TextWrapper>\n      {timerMs ? getTimerAsText(timerMs) : null}\n    </TextWrapper>\n  )\n}\n\nconst Timer = () => {\n  const gameState = useSelector(state => state.board.gameState);\n\n  return (\n      <InfoButton>\n        <FaStopwatch \n          style={{ color: gameFinalStates.includes(gameState) && \"red\"}}\n        />\n        <TimerDisplay gameState={gameState}/>\n      </InfoButton>\n  )\n}\n\nexport default Timer;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { setSupermanMode } from '../../../features/additionalData/additionalInfoSlice';\nimport InfoButton from '../AbstractInfoButton';\nimport { FaMask } from 'react-icons/fa';\n\n\nconst SupermanMode = () => {\n  const isSupermanMode = useSelector(state => state.additionalData.isSupermanMode);\n  const dispatch = useDispatch();\n\n  return (\n      <InfoButton \n        onClick={() => dispatch(setSupermanMode({ isSupermanMode: !isSupermanMode }))}\n      >\n        <FaMask style={{ \n          color: isSupermanMode && \"red\",\n          fontSize: \"80px\"}}\n        />\n      </InfoButton>\n  )\n}\n\nexport default SupermanMode;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { gameFinalStates, resetBoard } from '../../../features/board/boardSlice';\nimport InfoButton from '../AbstractInfoButton';\nimport { FaReply } from 'react-icons/fa';\n\n\nconst RePlay = () => {\n  const gameState = useSelector(state => state.board.gameState)\n  const dispatch = useDispatch();\n\n  return (\n      <InfoButton \n        onClick={() => dispatch(resetBoard())}\n      >\n        <FaReply style={{ \n          color: gameFinalStates.includes(gameState) && \"red\",\n          fontSize: \"60px\"}}\n        />\n      </InfoButton>\n  )\n}\n\nexport default RePlay;","import React from 'react';\nimport styled from 'styled-components';\n\nimport Flags from './Flags/Flags';\nimport Timer from './Timer/Timer';\nimport SupermanMode from './SupermanMode/SupermanMode';\nimport RePlay from './RePlay/RePlay';\n\nconst TopInfoBarWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n\n  width: 100%;\n`;\n\nexport const TopInfoBar = () => {\n  return (\n    <TopInfoBarWrapper>\n      <SupermanMode/>\n      <Timer/>\n      <Flags/>\n      <RePlay/>\n    </TopInfoBarWrapper>\n  )\n}\n\nexport default TopInfoBar;","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport lodash from 'lodash';\n\nimport { FaFlag, FaBorderAll, FaTrophy, FaChild } from 'react-icons/fa';\n\nimport { createBoard } from '../../../features/board/boardSlice';\nimport { startGame } from '../../../features/additionalData/additionalInfoSlice';\nimport { getTimerAsText } from '../../../utils/TimeUtils';\n\nconst BoardOptionWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  cursor: ${props => props.isClickable && \"pointer\" };\n\n  height: 125px;\n  width: 300px;\n  border-radius: 20px;\n  font-size: 20px;\n  background-color: #c2c2c2;\n\n  margin: 10px;\n`;\n\nconst CustomOptionWrapper = styled(BoardOptionWrapper)`\n  width: 400px;\n`;\n\nconst BoardContentWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-around;\n  padding-top: 2px;\n  margin: 2px;\n`;\n\nconst InputText = styled.input`\n  height: 20px;\n  width: 50px;\n  background-color: white;\n  outline: none;\n  border-width: 0;\n  border-radius: 5px;\n  text-align: center;\n  margin-left: 5px;\n  margin-right: 5px;\n  color: ${props => props.isTextValid ? 'black' : 'red'};\n`;\n\nconst isPositiveNumber = str => Number.isInteger(lodash.toNumber(str)) && parseInt(str) > 0;\n\nconst NumericStyledInput = ({ onChangeHandler }) => {\n  const [isTextValid, setIsTextValid] = useState(true);\n\n  const onChange = event => {\n    const newValue = event.target.value;\n    const isValueValid = isPositiveNumber(newValue) || [\"\", null].includes(newValue);\n    setIsTextValid(isValueValid);\n    if ( isValueValid ) {\n      onChangeHandler(parseInt(newValue));\n    } else {\n      onChangeHandler(null);\n    }\n  }\n\n  return (\n    <InputText \n      onChange={onChange} \n      isTextValid={isTextValid}\n      onClick={event => event.stopPropagation()}\n    />\n  )\n} \n\nconst BestScore = ({ gameMode }) => {\n  const bestScores = useSelector(state => state.additionalData.bestScores[gameMode]);\n  const [bestScore, setBestScore] = useState(null);\n\n  useEffect(() => {\n    const minTimeScore = lodash.minBy(bestScores, (obj) => obj.time);\n    setBestScore(minTimeScore);\n  }, [bestScores])\n\n  return (\n    bestScore ? \n      (<BoardContentWrapper>\n        <FaTrophy style={{ marginRight: \"5px\" }}/>\n        { getTimerAsText(bestScore.time) }\n        <div style={{ width: \"20px\" }}/>\n        <FaChild/>\n        { bestScore.playerName }\n      </BoardContentWrapper>) : null\n  )\n\n}\n\nexport const CastumBoardOption = () => {\n  const dispatch = useDispatch();\n  const [height, setHeight] = useState(null);\n  const [width, setWidth] = useState(null);\n  const [flagAmount, setFlagAmount] = useState(null);\n  const modeName = 'Custom Mode';\n  const fullGameMode = `${modeName} ${height}X${width}/${flagAmount}`;\n  const isClickable = height && width && flagAmount;\n  \n  return (\n    <CustomOptionWrapper \n      isClickable={isClickable}\n      onClick={() => {\n      if ( isClickable )\n        dispatch(createBoard({height, width, flagAmount}));\n        dispatch(startGame({ gameMode: fullGameMode}));\n      }}\n      style={{ backgroundColor: isClickable && \"#a8d0a8\" }}\n    >\n      {\"Custom Mode\"}\n      <BoardContentWrapper>\n        <FaFlag/>\n        <NumericStyledInput onChangeHandler={setFlagAmount}/>\n        <div style={{ width: \"20px\" }}/>\n        <FaBorderAll/>\n        <NumericStyledInput onChangeHandler={setHeight}/>\n        {'X'}\n        <NumericStyledInput onChangeHandler={setWidth}/>\n      </BoardContentWrapper>\n      <BestScore gameMode={fullGameMode}/>\n    </CustomOptionWrapper>\n  )\n}\n\nconst BoardOption = ({ modeName, height, width, flagAmount }) => {\n  const dispatch = useDispatch();\n  const fullGameMode = `${modeName} ${height}X${width}/${flagAmount}`;\n\n  return (\n    <BoardOptionWrapper \n      isClickable\n      onClick={() => {\n        dispatch(createBoard({height, width, flagAmount}));\n        dispatch(startGame({ gameMode: fullGameMode }));\n      }}\n    >\n      {modeName}\n      <BoardContentWrapper>\n        <FaFlag style={{ marginRight: \"5px\" }}/>\n        {flagAmount}\n        <div style={{ width: \"20px\" }}/>\n        <FaBorderAll style={{ marginRight: \"5px\" }}/>\n        {`${height} X ${width}`}\n      </BoardContentWrapper>\n      <BestScore gameMode={fullGameMode}/>\n    </BoardOptionWrapper>\n  )\n}\n\nexport default BoardOption;","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport TextField from '@material-ui/core/TextField';\n\nimport BoardOption, { CastumBoardOption } from './BoardOption/BoardOption';\nimport { changePlayerName } from '../../features/additionalData/additionalInfoSlice';\n\nconst ChooseBoardWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  margin: auto;\n`;\n\nconst BoardRowWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n`;\n\nconst PlayerNameInput = () => {\n  const prevPlayerName = useSelector(state => state.additionalData.playerName);\n  const [playerName, setPlayerName] = useState(prevPlayerName);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (playerName !== prevPlayerName){\n      dispatch(changePlayerName(playerName));\n    }\n  }, [dispatch, playerName, prevPlayerName])\n\n  return (\n    <TextField \n      label=\"Player Name\" \n      defaultValue={prevPlayerName}\n      onChange={event => {setPlayerName(event.target.value)}}\n    />\n  )\n\n}\n\nexport const ChooseBoard = () => {\n  return (\n    <ChooseBoardWrapper>\n      <BoardRowWrapper style={{ marginBottom: '20px' }}>\n        <PlayerNameInput/>\n      </BoardRowWrapper>\n      <BoardRowWrapper>\n        <BoardOption \n          modeName='Child Mode'\n          height={10}\n          width={20}\n          flagAmount={15}\n        />\n        <BoardOption \n          modeName=\"'Trust me im good' Mode\"\n          height={40}\n          width={30}\n          flagAmount={250}\n        />\n      </BoardRowWrapper>\n      <BoardRowWrapper>\n        <BoardOption \n          modeName='Challenge Mode'\n          height={300}\n          width={300}\n          flagAmount={10000}\n        />\n        <BoardOption \n          modeName='Check my limits Mode'\n          height={1000}\n          width={1000}\n          flagAmount={110000}\n        />\n      </BoardRowWrapper>\n      <BoardRowWrapper>\n        <CastumBoardOption/>\n      </BoardRowWrapper>\n    </ChooseBoardWrapper>\n  )\n}\n\nexport default ChooseBoard;","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport styled from 'styled-components';\nimport { FaBomb, FaFlag } from 'react-icons/fa';\n\nimport { \n    gameFinalStates, Flag, Bomb, Number, Empty, \n    getCellType, gameWon, handleUserClick \n} from '../../../features/board/boardSlice';\n\nconst selectedColor = \"#dedede\";\nconst shownUnselectedColor = \"#757575\";\nconst unselectedColor = \"#c1c1c1\";\n\n\nconst CellWrapper = styled.div`\n    display: flex;\n`;\n\n\nconst CellBackground = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: calc(100% - 5px);\n  height: calc(100% - 5px);\n  background-color: ${props => ((props.isSelected || (props.gameState === gameWon)) ? selectedColor : ((props.isSupermanMode || gameFinalStates.includes(props.gameState)) ? shownUnselectedColor : unselectedColor))};\n  border-radius: 20%;\n  cursor: ${props => (props.isSelected || gameFinalStates.includes(props.gameState)) ? 'default' : 'pointer'};\n\n  color: ${props => ((props.cellType === Bomb) && props.isSelected) ? \"red\" : \"black\"};\n  font-size: 25px;\n  margin: auto;\n`;\n\n\nconst CellContent = ({type, number}) => {\n    switch (type) {\n        case Flag:\n            return <FaFlag/>;\n        \n        case Bomb:\n            return <FaBomb/>;\n\n        case Number:\n            return (<div>{number}</div>);\n\n        default:\n            return <div/>;\n    }\n} \n\n\nconst Cell = ({ x, y, style }) => {\n    const cellData = useSelector(state => state.board.cellsContent[x][y], shallowEqual);\n    const gameState = useSelector(state => state.board.gameState);\n    const isSupermanMode = useSelector(state => state.additionalData.isSupermanMode);\n    const dispatch = useDispatch();\n\n    const [cellType, setCellType] = useState(Empty);\n    const [isCellSelected, setIsCellSelected] = useState(false);\n    const [closedBombs, setClosedBombs] = useState(Empty);\n\n    useEffect(() => {\n        setIsCellSelected(cellData.isSelected);\n        setClosedBombs(cellData.closeBombs);\n        setCellType(getCellType(cellData, (isSupermanMode || gameFinalStates.includes(gameState))));\n    }, [cellData, isSupermanMode, gameState])\n\n    const handleClick = () => {\n        if (!isCellSelected && !gameFinalStates.includes(gameState)) {\n            dispatch(handleUserClick({x, y}));\n        }\n    }\n\n    return (\n        <CellWrapper style={style}>\n            <CellBackground \n                isSelected={isCellSelected}\n                gameState={gameState}\n                cellType={cellType}\n                isSupermanMode={ isSupermanMode}\n                onClick={handleClick}\n            >\n                <CellContent \n                    type={cellType} \n                    number={closedBombs}\n                />\n            </CellBackground>\n        </CellWrapper>\n    )\n}\n\nexport default Cell;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Grid } from 'react-virtualized';\nimport styled from 'styled-components';\nimport useDimensions from \"react-use-dimensions\";\n\nimport Cell from './Cell/Cell';\n\nconst BoardWeapper = styled.div`\n  display: flex;\n  flex: 6;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst cellRenderer = ({ columnIndex, rowIndex, style }) => {\n  return (\n    <Cell \n      x={rowIndex}\n      y={columnIndex}\n      key={`cell-${rowIndex}-${columnIndex}`}\n      style={style}\n    />);\n}\n\n\nconst Board = ({ cellSize }) => {\n  const [ref, { width, height }] = useDimensions();\n\n  const boardHeight = useSelector(state => state.board.boardHeight);\n  const boardWidth = useSelector(state => state.board.boardWidth);\n\n  return (\n    <BoardWeapper ref={ref}>\n      <Grid\n        cellRenderer={cellRenderer}\n        columnCount={boardWidth}\n        rowCount={boardHeight}\n        columnWidth={cellSize}\n        rowHeight={cellSize}\n        height={ Math.min(cellSize * boardHeight, height ?? 0) }\n        width={ Math.min(cellSize * boardWidth + 20, width ?? 0) }\n        style={{ outline: 'none', borderWidth: 0 }}\n      />\n    </BoardWeapper>\n  );\n}\n\nexport default Board;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport { gameFinalStates, resetBoard, gameWon } from '../features/board/boardSlice';\n\nconst DialogWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  width: 400px;\n`;\n\nconst DialogContentTextWrapper = styled.div`\n  font-size: 40px;\n  color: ${props => props.gameState === gameWon ? \"green\" : \"red\"};\n`;\n\nconst ButtonsRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n`;\n\nexport const GameEndedDialog = ({gameState}) => {\n  const dispatch = useDispatch();\n  const playerName = useSelector(state => state.additionalData.playerName)\n  const [open, setOpen] = React.useState(false);\n\n  useEffect(() => {\n    setOpen(gameFinalStates.includes(gameState));\n  }, [gameState])\n\n  return (\n    <Dialog\n      open={open}\n      onClose={() => setOpen(false)}\n    >\n      <DialogWrapper>\n        <DialogTitle>{`Hey there ${playerName}`}</DialogTitle>\n        <DialogContentTextWrapper gameState={gameState}>\n          {`YOU ${gameState}`}\n        </DialogContentTextWrapper>\n        {gameState === gameWon && 'your score will be added to the score board'}\n        <ButtonsRow>\n          <Button onClick={() => dispatch(resetBoard())} style={{ margin: '10px' }}>\n            back to lobby\n          </Button>\n          <Button onClick={() => setOpen(false)} style={{ margin: '10px' }}>\n            back to board\n          </Button>\n        </ButtonsRow>\n      </DialogWrapper>\n    </Dialog>\n  );\n}\n\nexport default GameEndedDialog;","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { endGame } from '../features/additionalData/additionalInfoSlice';\nimport { gameFinalStates, gameWon, gameOnConfigurations } from '../features/board/boardSlice';\nimport TopInfoBar from '../components/TopInfo';\nimport ChooseBoard from '../components/ChooseBoard/index';\nimport Board from '../components/Board/Board';\nimport GameEndedDialog from '../components/GameEndedDialog'\n\nconst MainPage = styled.div`\n  display: flex;\n  flex-direction: column;\n  user-select: none;\n  \n  height: 100%;\n  width: 100%;\n`;\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const gameState = useSelector(state => state.board.gameState);\n\n  useEffect(() => {\n    if (gameFinalStates.includes(gameState)) {\n      dispatch(endGame({ isGameWon: gameState === gameWon }));\n    }\n  }, [dispatch, gameState])\n\n  return (\n    <MainPage>\n      {\n      (gameState === gameOnConfigurations) ? <ChooseBoard/> :\n      <>\n        <TopInfoBar/>\n        <Board\n          cellSize={50}\n        />\n        <GameEndedDialog gameState={gameState}/>\n      </>\n    }\n    </MainPage>\n  );\n}\n\nexport default App;\n","import { combineReducers } from '@reduxjs/toolkit';\nimport additionalDataReducer from '../features/additionalData/additionalInfoSlice';\nimport boardReducer from '../features/board/boardSlice';\nimport { persistReducer} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\n\nexport const rootReducer = combineReducers({\n  additionalData: persistReducer(persistConfig, additionalDataReducer),\n  board: boardReducer\n});\n\nexport default rootReducer;","import { configureStore } from '@reduxjs/toolkit';\nimport { persistStore } from 'redux-persist';\n\nimport rootReducer from './rootReducer';\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: false,\n      immutableCheck: false,\n    })\n});\n\nexport const persistor = persistStore(store);\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./rootReducer', () => {\n    const newRootReducer = require('./rootReducer').default;\n    store.replaceReducer(newRootReducer);\n  })\n}\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport store, { persistor } from './app/store'\nimport { setIsFlagMode } from './features/board/boardSlice';\n\nimport './index.css';\n\nconst targetKey = 'Shift'\n\nconst pressHandler = ( key, isKeyPressed) => {\n  if (key === targetKey) {\n    const state = store.getState();\n    if (state.board.isFlagMode !== isKeyPressed) {\n      store.dispatch(setIsFlagMode(isKeyPressed));\n    }\n  }\n};\n\nwindow.addEventListener('keydown', (event) => pressHandler(event.key, true));\nwindow.addEventListener('keyup', (event) => pressHandler(event.key, false));\n\nconst render = () => {\n  const App = require('./app/App').default\n\n  ReactDOM.render(\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>,\n    document.getElementById('root')\n  )\n}\n\nrender()\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./app/App', render)\n}","import { createSlice } from '@reduxjs/toolkit';\nimport moment from 'moment';\nimport lodash from 'lodash';\n\nimport { calculateDiffToNow } from '../../utils/TimeUtils';\n\nexport const dafaultPlayerName = 'Unknown Player';\n\nconst initialState = {\n  /** Previus games best score **/\n  bestScores: {},\n  gameBeginningTime: null,\n  isSupermanMode: false,\n  gameMode: null,\n  playerName: dafaultPlayerName,\n};\n\nconst additionalDataSlice = createSlice({\n  name: 'additionalData',\n  initialState,\n  reducers: {\n    startGame(state, action) {\n      const { gameMode } = action.payload\n      state.isSupermanMode = false;\n      state.gameMode = gameMode;\n      state.gameBeginningTime = moment().toISOString();\n    },\n\n    endGame(state, action) {\n      const { isGameWon } = action.payload\n      if (isGameWon) {\n        const defaultValue = {}\n        defaultValue[state.gameMode] = [];\n        const bestScores = lodash.defaults(state.bestScores, defaultValue)\n        bestScores[state.gameMode].push({ playerName: state.playerName, time: calculateDiffToNow(moment(state.gameBeginningTime)) })\n        state.bestScores = bestScores;\n      }\n    },\n\n    setSupermanMode(state, action) {\n      const { isSupermanMode } = action.payload\n      state.isSupermanMode = isSupermanMode;\n    },\n\n    changePlayerName(state, action) {\n      const playerName = action.payload;\n      state.playerName = [null, \"\"].includes(playerName) ? dafaultPlayerName : playerName;\n    }\n  }\n})\n\nexport const {\n  startGame,\n  endGame,\n  setSupermanMode,\n  changePlayerName\n} = additionalDataSlice.actions;\n\nexport default additionalDataSlice.reducer;","import moment from 'moment';\n\n\nexport const calculateDiffToNow = beginningTime => {\n  /** Return ms diff between the beginning and now **/\n  return moment.duration(moment().diff(beginningTime)).asMilliseconds();\n};\n\nexport const getTimerAsText = ms => {\n  return ms && moment.utc(ms).format('HH:mm:ss');\n};"],"sourceRoot":""}