{"version":3,"sources":["utils/boardUtils.js","features/board/boardSlice.js","components/TopInfo/AbstractInfoButton.jsx","components/TopInfo/Flags/Flags.jsx","components/TopInfo/Timer/HighScoreDialog.jsx","components/TopInfo/Timer/Timer.jsx","components/TopInfo/SupermanMode/SupermanMode.jsx","components/TopInfo/RePlay/RePlay.jsx","components/TopInfo/index.js","components/ChooseBoard/index.jsx","components/Board/Cell/Cell.jsx","components/Board/Board.jsx","components/GameEndedDialog.jsx","app/App.jsx","app/rootReducer.js","app/store.js","index.js","features/additionalData/additionalInfoSlice.js","utils/TimeUtils.js","components/ChooseBoard/BoardOption/BoardOption.jsx","components/ScoreDisplay/ScoreDisplay.jsx"],"names":["randomBomb","bombAmount","cellsAmount","randomeSeed","excecuteActionOnNearCells","x","y","height","width","board","action","i","Math","max","min","j","gameWon","gameLost","gameOnConfigurations","gamePreRunning","gameRunning","gameFinalStates","getInitialState","seed","cellsContent","boardHeight","boardWidth","totalFlagsAmount","usedFlagsAmount","gameState","isFlagMode","randomSeedKey","getInitializedCell","isBomb","hasFlag","closeBombs","isSelected","Flag","Bomb","Number","Empty","getCellType","cellData","isSupermanMode","displayCell","state","payload","exposeStack","exposeCell","currentCellType","push","length","currCellData","shift","exposeNearCells","boardSlice","createSlice","name","devTools","initialState","random","reducers","createBoard","flagAmount","bombsDetected","seedrandom","bombsPlaced","passedCells","bombsLocations","newBoard","Array","addBombsToNearCellsCounter","map","generateBoard","setIsFlagMode","resetBoard","handleUserClick","cellContent","isFlagAdded","isGameWon","toggleFlag","setGameState","actions","InfoButtonWrapper","styled","div","InfoButton","onClick","children","MainWrapper","RowWrapper","FlagAmountWrapper","CommenttWrapper","Flags","useSelector","shallowEqual","style","color","DialogWrapper","TopDialog","DialogTitle","DialogContentTextWrapper","ButtonsRow","HighScoreListWrapper","NoDataText","HighScoreDialog","open","closeDialog","gameMode","additionalData","bestScores","Dialog","onClose","score","index","ScoreDisplay","Button","margin","marginRight","TextWrapper","TimerDisplay","useState","timerMs","setTimerMs","gameBeginningTime","useEffect","timerInterval","setInterval","includes","calculateDiffToNow","moment","clearInterval","getTimerAsText","Timer","React","setOpen","SupermanMode","dispatch","useDispatch","setSupermanMode","fontSize","RePlay","TopInfoBarWrapper","TopInfoBar","ChooseBoardWrapper","BoardRowWrapper","PlayerNameInput","prevPlayerName","playerName","setPlayerName","changePlayerName","TextField","label","defaultValue","onChange","event","target","value","ChooseBoard","marginBottom","BoardOption","modeName","CellWrapper","CellBackground","props","cellType","CellContent","type","number","Cell","setCellType","isCellSelected","setIsCellSelected","closedBombs","setClosedBombs","BoardWeapper","cellRenderer","columnIndex","rowIndex","Board","cellSize","useDimensions","ref","columnCount","rowCount","columnWidth","rowHeight","outline","borderWidth","GameEndedDialog","MainPage","LoadingWrapper","RenderSwitch","TopInfo","App","endGame","persistConfig","key","storage","rootReducer","combineReducers","persistReducer","additionalDataReducer","boardReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","immutableCheck","persistor","persistStore","pressHandler","isKeyPressed","getState","window","addEventListener","require","default","ReactDOM","render","loading","document","getElementById","dafaultPlayerName","additionalDataSlice","startGame","toISOString","lodash","defaults","time","sortBy","obj","slice","beginningTime","duration","diff","asMilliseconds","ms","utc","format","BoardOptionWrapper","isClickable","CustomOptionWrapper","BoardContentWrapper","InputText","input","isTextValid","NumericStyledInput","onChangeHandler","setIsTextValid","str","newValue","isValueValid","isInteger","toNumber","parseInt","stopPropagation","BestScore","bestScore","head","CastumBoardOption","setHeight","setWidth","setFlagAmount","fullGameMode","Boolean","setImmediate","backgroundColor","ScoreDisplayWrapper"],"mappings":"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","file":"static/js/main.49b657d1.chunk.js","sourcesContent":["import seedrandom from 'seedrandom';\n\nimport { getInitializedCell, getCellType, Empty } from '../features/board/boardSlice';\n\nconst randomBomb = ({bombAmount, cellsAmount, randomeSeed}) => {\n  return (randomeSeed() < (bombAmount / cellsAmount));\n};\n\nconst excecuteActionOnNearCells = (x, y, height, width, board, action) => {\n  for( let i = Math.max(0, x-1); i <= Math.min(height-1, x+1); i++) {\n    for( let j = Math.max(0, y-1); j <= Math.min(width-1, y+1); j++) {\n      action(i, j, board);\n    }\n  }\n};\n\nexport const generateBoard = ({ height, width, bombAmount, randomSeedKey }) => {\n  /** Generate a board with only bombs **/\n  const randomeSeed = new seedrandom(randomSeedKey);\n  let bombsPlaced = 0;\n  let passedCells = 0;\n  const bombsLocations = [];\n  const newBoard = new Array(height);\n  for( let i = 0; i < height; i++) {\n    newBoard[i] = new Array(width);\n    for( let j = 0; j < width; j++) {\n      newBoard[i][j] = getInitializedCell();\n      const isBomb = randomBomb({\n        bombAmount: bombAmount - bombsPlaced,\n        cellsAmount: height * width - passedCells,\n        randomeSeed\n      });\n      if (isBomb) {\n        bombsLocations.push([i, j])\n        bombsPlaced += 1;\n      }\n      newBoard[i][j].isBomb = isBomb;\n      passedCells += 1;\n    }\n  }\n\n  /** Add closeBombs number **/\n  const addBombsToNearCellsCounter = (i, j, board) => board[i][j].closeBombs += 1;\n  bombsLocations.map(([x, y]) => excecuteActionOnNearCells( x, y, height, width, newBoard, addBombsToNearCellsCounter))\n\n  return newBoard;\n};\n\nexport const exposeNearCells = ({ x, y, height, width, board }) => {\n  const exposeStack = [[x, y]];\n\n  const exposeCell = (i, j, board) => {\n    const cellData = board[i][j];\n    const currentCellType = getCellType(cellData, true);\n    if (!cellData.isSelected && (currentCellType === Empty)) {\n        exposeStack.push([i, j]);\n      }\n      cellData.isSelected = !cellData.hasFlag;\n  }\n  \n  while (exposeStack.length > 0) {\n    const [x, y] = exposeStack[0];\n    const currCellData = board[x][y];\n    currCellData.isSelected = !currCellData.hasFlag;\n    const cellType = getCellType(currCellData, true);\n    if (cellType === Empty) {\n      excecuteActionOnNearCells(x, y, height, width, board, exposeCell);\n      }\n    exposeStack.shift();\n  }\n};","import { createSlice } from '@reduxjs/toolkit';\nimport { generateBoard, exposeNearCells } from '../../utils/boardUtils';\n\nexport const gameWon = 'WON';\nexport const gameLost = 'LOST';\nexport const gameOnConfigurations = 'onConfigurations';\nexport const gamePreRunning = 'preRunning';\nexport const gameRunning = 'running';\n\nexport const gameFinalStates = [gameWon, gameLost];\n\nconst getInitialState = (seed) => {\n  return {\n    /** The content of the board, two dimentional list of all the data **/\n    cellsContent: null,\n    boardHeight: null,\n    boardWidth: null,\n    totalFlagsAmount: 0,\n    usedFlagsAmount: 0,\n    gameState: gameOnConfigurations,\n    isFlagMode: false,\n    randomSeedKey: seed,\n  }\n};\n\nexport const getInitializedCell = () => {\n  return {\n    isBomb: false,\n    hasFlag: false,\n    closeBombs: 0,\n    isSelected: false,\n  }\n};\n\nexport const Flag = \"flag\";\nexport const Bomb = \"bomb\";\nexport const Number = \"number\";\nexport const Empty = \"empty\";\n\nexport const getCellType = (cellData, isSupermanMode) => {\n  return cellData.hasFlag ? Flag : ((cellData.isSelected || isSupermanMode) ? (cellData.isBomb ? Bomb : ((cellData.closeBombs > 0) ? Number : Empty)) : Empty);\n};\n\nconst toggleFlag = (state, action) => {\n  const { x, y } = action.payload\n  const cellContent = state.cellsContent[x][y];\n  const isFlagAdded = !cellContent.hasFlag;\n\n  /** if removing a flag or if there are flags left to put another **/\n  if ( !isFlagAdded || state.usedFlagsAmount < state.totalFlagsAmount ) {\n\n    if (cellContent.isBomb) {\n      state.bombsDetected += isFlagAdded ? 1 : -1;\n    }\n\n    const isGameWon = state.bombsDetected === state.totalFlagsAmount;\n    state.gameState = isGameWon ? gameWon : gameRunning;\n    cellContent.hasFlag = isFlagAdded;\n    state.usedFlagsAmount = state.usedFlagsAmount + (isFlagAdded ? 1 : -1);\n  }\n};\n\nconst displayCell = (state, action) => {\n  const { x, y } = action.payload;\n  const {isBomb, hasFlag, closeBombs} = state.cellsContent[x][y];\n\n  if (hasFlag) return;\n\n  if (isBomb) {\n    state.cellsContent[x][y].isSelected = true;\n    state.gameState = gameLost;\n    return;\n  }\n\n  if (closeBombs > 0) {\n    state.cellsContent[x][y].isSelected = true;\n    return;\n  }\n\n  exposeNearCells({\n    x, y, \n    height: state.boardHeight, \n    width: state.boardWidth,\n    board: state.cellsContent\n  });\n};\n\n\nconst boardSlice = createSlice({\n  name: 'board',\n  devTools: false,\n  initialState: getInitialState(Math.random()),\n  reducers: {\n    createBoard: (state, action) => {\n      const { height, width, flagAmount } = action.payload;\n      state.boardHeight = height;\n      state.boardWidth = width;\n      state.totalFlagsAmount = flagAmount;\n      state.usedFlagsAmount = 0;\n      state.bombsDetected = 0;\n      state.cellsContent = generateBoard({ height, width, bombAmount: flagAmount, randomSeedKey: state.randomSeedKey});\n      state.gameState = gameRunning;\n    },\n\n    setIsFlagMode: (state, action) => {\n      state.isFlagMode = action.payload;\n    },\n\n    resetBoard: (state, action) => {\n      return getInitialState(Math.random());\n    },\n\n    handleUserClick: (state, action) => {\n      if (state.isFlagMode) {\n        toggleFlag(state, action);\n      } else {\n        displayCell(state, action);\n      }\n    },\n\n    setGameState: (state, action) => {\n      state.gameState = action.payload;\n    }\n  }\n})\n\nexport const {\n  createBoard,\n  resetBoard,\n  setIsFlagMode,\n  handleUserClick,\n  setGameState\n} = boardSlice.actions;\n\nexport default boardSlice.reducer;","import React from 'react';\nimport styled from 'styled-components';\n\nconst InfoButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n\n  height: 100px;\n  min-width: 250px;\n  border-radius: 20px;\n  font-size: 40px;\n  background-color: #c2c2c2;\n\n  margin: 20px;\n  padding-right: 15px; \n  padding-left: 15px;\n`;\n\nexport const InfoButton = ({ onClick, children }) => {\n  return (\n    <InfoButtonWrapper onClick={onClick}>\n      {children}\n    </InfoButtonWrapper>\n  )\n};\n\nexport default InfoButton;","import React from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport InfoButton from '../AbstractInfoButton';\nimport { gameWon } from '../../../features/board/boardSlice';\nimport { FaFlag } from 'react-icons/fa';\n\nconst MainWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst RowWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst FlagAmountWrapper = styled.div`\n  margin-left: 10px;\n`;\n\nconst CommenttWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  font-size: 15px;\n  color: #5a5a5a;\n`;\n\nconst Flags = () => {\n  const [totalFlagsAmount, usedFlagsAmount, gameState] = useSelector(\n    state => [\n      state.board.totalFlagsAmount, \n      state.board.usedFlagsAmount, \n      state.board.gameState\n    ], shallowEqual);\n\n  return (\n      <InfoButton>\n        <MainWrapper>\n          <RowWrapper>\n            <FaFlag \n              style={{ color: (gameState === gameWon) ? \"green\" : (usedFlagsAmount === totalFlagsAmount) && \"red\"}}\n            />\n            <FlagAmountWrapper>\n              {`${usedFlagsAmount}/${totalFlagsAmount}`}\n            </FlagAmountWrapper>\n          </RowWrapper>\n          <CommenttWrapper>\n            {`Shift+LeftClick for Flag`}\n          </CommenttWrapper>\n        </MainWrapper>\n      </InfoButton>\n  )\n}\n\nexport default Flags;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\n\nimport { FaCaretSquareLeft } from 'react-icons/fa';\n\nimport ScoreDisplay from '../../ScoreDisplay/ScoreDisplay';\n\nconst DialogWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  max-height: 500px;\n  width: 400px;\n`;\n\nconst TopDialog = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 10px;\n`;\n\nconst DialogTitle = styled.div`\n  font-size: 40px;\n  margin-bottom: 10px;\n`;\n\nconst DialogContentTextWrapper = styled.div`\n  font-size: 20px;\n  margin-bottom: 5px;\n`;\n\nconst ButtonsRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst HighScoreListWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  align-items: flex-start;\n  overflow: auto;\n\n  padding-left: 50px;\n`;\n\nconst NoDataText = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const HighScoreDialog = ({open, closeDialog}) => {\n  const gameMode = useSelector(state => state.additionalData.gameMode);\n  const bestScores = useSelector(state => state.additionalData.bestScores[gameMode]);\n\n  return (\n    <Dialog\n      open={open}\n      onClose={closeDialog}\n    >\n      <DialogWrapper>\n        <TopDialog>\n          <DialogTitle>{'High Score Top 25'}</DialogTitle>\n          <DialogContentTextWrapper>\n            {gameMode}\n          </DialogContentTextWrapper>\n        </TopDialog>\n        {bestScores ?\n          <HighScoreListWrapper>\n              {bestScores.map((score, index) => \n                  <ScoreDisplay key={`${gameMode}-${index}`} {...score}/>)\n              }\n          </HighScoreListWrapper> : \n          <NoDataText>\n            No scores to show yet, Now go and be the hero!\n          </NoDataText>\n        }\n        <ButtonsRow>\n            <Button onClick={closeDialog} style={{ margin: '10px' }}>\n              <FaCaretSquareLeft style={{ marginRight: '5px' }}/>\n              back to board\n            </Button>\n        </ButtonsRow>\n      </DialogWrapper>\n    </Dialog>\n  );\n}\n\nexport default HighScoreDialog;","import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport moment from 'moment';\nimport styled from 'styled-components';\n\nimport { calculateDiffToNow, getTimerAsText} from '../../../utils/TimeUtils';\nimport { gameFinalStates } from '../../../features/board/boardSlice';\nimport InfoButton from '../AbstractInfoButton';\nimport HighScoreDialog from './HighScoreDialog';\n\nimport { FaStopwatch } from 'react-icons/fa';\n\nconst TextWrapper = styled.div`\n  margin-left: 10px;\n`;\n\nconst TimerDisplay = ({gameState}) => {\n  const [timerMs, setTimerMs] = useState(null);\n  const gameBeginningTime = useSelector(state => state.additionalData.gameBeginningTime);\n\n  useEffect(() => {\n    const timerInterval = setInterval(() => {\n      if (!gameFinalStates.includes(gameState)) {\n        setTimerMs(calculateDiffToNow(moment(gameBeginningTime)));\n      }\n    }, 1000);\n    return () => {\n      clearInterval(timerInterval);\n    }\n  }, [gameBeginningTime, gameState]);\n\n  return (\n    <TextWrapper>\n      {timerMs ? getTimerAsText(timerMs) : null}\n    </TextWrapper>\n  )\n}\n\nconst Timer = () => {\n  const gameState = useSelector(state => state.board.gameState);\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <>\n      <InfoButton onClick={() => setOpen(true)}>\n        <FaStopwatch \n          style={{ color: gameFinalStates.includes(gameState) && \"red\"}}\n        />\n        <TimerDisplay gameState={gameState}/>\n        </InfoButton>\n        <HighScoreDialog\n        open={open}\n        closeDialog={() => setOpen(false)}\n      />\n    </>\n  )\n}\n\nexport default Timer;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { setSupermanMode } from '../../../features/additionalData/additionalInfoSlice';\nimport InfoButton from '../AbstractInfoButton';\nimport { FaMask } from 'react-icons/fa';\n\n\nconst SupermanMode = () => {\n  const isSupermanMode = useSelector(state => state.additionalData.isSupermanMode);\n  const dispatch = useDispatch();\n\n  return (\n      <InfoButton \n        onClick={() => dispatch(setSupermanMode({ isSupermanMode: !isSupermanMode }))}\n      >\n        <FaMask style={{ \n          color: isSupermanMode && \"red\",\n          fontSize: \"80px\"}}\n        />\n      </InfoButton>\n  )\n}\n\nexport default SupermanMode;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { gameFinalStates, resetBoard } from '../../../features/board/boardSlice';\nimport InfoButton from '../AbstractInfoButton';\nimport { FaReply } from 'react-icons/fa';\n\n\nconst RePlay = () => {\n  const gameState = useSelector(state => state.board.gameState)\n  const dispatch = useDispatch();\n\n  return (\n      <InfoButton \n        onClick={() => dispatch(resetBoard())}\n      >\n        <FaReply style={{ \n          color: gameFinalStates.includes(gameState) && \"red\",\n          fontSize: \"60px\"}}\n        />\n      </InfoButton>\n  )\n}\n\nexport default RePlay;","import React from 'react';\nimport styled from 'styled-components';\n\nimport Flags from './Flags/Flags';\nimport Timer from './Timer/Timer';\nimport SupermanMode from './SupermanMode/SupermanMode';\nimport RePlay from './RePlay/RePlay';\n\nconst TopInfoBarWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n\n  width: 100%;\n`;\n\nexport const TopInfoBar = () => {\n  return (\n    <TopInfoBarWrapper>\n      <SupermanMode/>\n      <Timer/>\n      <Flags/>\n      <RePlay/>\n    </TopInfoBarWrapper>\n  )\n}\n\nexport default TopInfoBar;","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport TextField from '@material-ui/core/TextField';\n\nimport BoardOption, { CastumBoardOption } from './BoardOption/BoardOption';\nimport { changePlayerName } from '../../features/additionalData/additionalInfoSlice';\n\nconst ChooseBoardWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  margin: auto;\n`;\n\nconst BoardRowWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n`;\n\nconst PlayerNameInput = () => {\n  const prevPlayerName = useSelector(state => state.additionalData.playerName);\n  const [playerName, setPlayerName] = useState(prevPlayerName);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (playerName !== prevPlayerName){\n      dispatch(changePlayerName(playerName));\n    }\n  }, [dispatch, playerName, prevPlayerName])\n\n  return (\n    <TextField \n      label=\"Player Name\" \n      defaultValue={prevPlayerName}\n      onChange={event => {setPlayerName(event.target.value)}}\n    />\n  )\n\n}\n\nexport const ChooseBoard = () => {\n  return (\n    <ChooseBoardWrapper>\n      <BoardRowWrapper style={{ marginBottom: '20px' }}>\n        <PlayerNameInput/>\n      </BoardRowWrapper>\n      <BoardRowWrapper>\n        <BoardOption \n          modeName='Child Mode'\n          height={10}\n          width={20}\n          flagAmount={15}\n        />\n        <BoardOption \n          modeName=\"'Trust me im good' Mode\"\n          height={40}\n          width={30}\n          flagAmount={250}\n        />\n      </BoardRowWrapper>\n      <BoardRowWrapper>\n        <BoardOption \n          modeName='Challenge Mode'\n          height={300}\n          width={300}\n          flagAmount={10000}\n        />\n        <BoardOption \n          modeName='Check my limits Mode'\n          height={1000}\n          width={1000}\n          flagAmount={110000}\n        />\n      </BoardRowWrapper>\n      <BoardRowWrapper>\n        <CastumBoardOption/>\n      </BoardRowWrapper>\n    </ChooseBoardWrapper>\n  )\n}\n\nexport default ChooseBoard;","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport styled from 'styled-components';\nimport { FaBomb, FaFlag } from 'react-icons/fa';\n\nimport { \n    gameFinalStates, Flag, Bomb, Number, Empty, \n    getCellType, gameWon, handleUserClick \n} from '../../../features/board/boardSlice';\n\nconst selectedColor = \"#dedede\";\nconst shownUnselectedColor = \"#757575\";\nconst unselectedColor = \"#c1c1c1\";\n\n\nconst CellWrapper = styled.div`\n    display: flex;\n`;\n\n\nconst CellBackground = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: calc(100% - 5px);\n  height: calc(100% - 5px);\n  background-color: ${props => ((props.isSelected || (props.gameState === gameWon)) ? selectedColor : ((props.isSupermanMode || gameFinalStates.includes(props.gameState)) ? shownUnselectedColor : unselectedColor))};\n  border-radius: 20%;\n  cursor: ${props => (props.isSelected || gameFinalStates.includes(props.gameState)) ? 'default' : 'pointer'};\n\n  color: ${props => ((props.cellType === Bomb) && props.isSelected) ? \"red\" : \"black\"};\n  font-size: 25px;\n  margin: auto;\n`;\n\n\nconst CellContent = ({type, number}) => {\n    switch (type) {\n        case Flag:\n            return <FaFlag/>;\n        \n        case Bomb:\n            return <FaBomb/>;\n\n        case Number:\n            return (<div>{number}</div>);\n\n        default:\n            return <div/>;\n    }\n} \n\n\nconst Cell = ({ x, y, style }) => {\n    const cellData = useSelector(state => state.board.cellsContent[x][y], shallowEqual);\n    const gameState = useSelector(state => state.board.gameState);\n    const isSupermanMode = useSelector(state => state.additionalData.isSupermanMode);\n    const dispatch = useDispatch();\n\n    const [cellType, setCellType] = useState(Empty);\n    const [isCellSelected, setIsCellSelected] = useState(false);\n    const [closedBombs, setClosedBombs] = useState(Empty);\n\n    useEffect(() => {\n        setIsCellSelected(cellData.isSelected);\n        setClosedBombs(cellData.closeBombs);\n        setCellType(getCellType(cellData, (isSupermanMode || gameFinalStates.includes(gameState))));\n    }, [cellData, isSupermanMode, gameState])\n\n    const handleClick = () => {\n        if (!isCellSelected && !gameFinalStates.includes(gameState)) {\n            dispatch(handleUserClick({x, y}));\n        }\n    }\n\n    return (\n        <CellWrapper style={style}>\n            <CellBackground \n                isSelected={isCellSelected}\n                gameState={gameState}\n                cellType={cellType}\n                isSupermanMode={ isSupermanMode}\n                onClick={handleClick}\n            >\n                <CellContent \n                    type={cellType} \n                    number={closedBombs}\n                />\n            </CellBackground>\n        </CellWrapper>\n    )\n}\n\nexport default Cell;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Grid } from 'react-virtualized';\nimport styled from 'styled-components';\nimport useDimensions from \"react-use-dimensions\";\n\nimport Cell from './Cell/Cell';\n\nconst BoardWeapper = styled.div`\n  display: flex;\n  flex: 6;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst cellRenderer = ({ columnIndex, rowIndex, style }) => {\n  return (\n    <Cell \n      x={rowIndex}\n      y={columnIndex}\n      key={`cell-${rowIndex}-${columnIndex}`}\n      style={style}\n    />);\n}\n\n\nconst Board = ({ cellSize }) => {\n  const [ref, { width, height }] = useDimensions();\n\n  const boardHeight = useSelector(state => state.board.boardHeight);\n  const boardWidth = useSelector(state => state.board.boardWidth);\n\n  return (\n    <BoardWeapper ref={ref}>\n      <Grid\n        cellRenderer={cellRenderer}\n        columnCount={boardWidth}\n        rowCount={boardHeight}\n        columnWidth={cellSize}\n        rowHeight={cellSize}\n        height={ Math.min(cellSize * boardHeight, height ?? 0) }\n        width={ Math.min(cellSize * boardWidth + 20, width ?? 0) }\n        style={{ outline: 'none', borderWidth: 0 }}\n      />\n    </BoardWeapper>\n  );\n}\n\nexport default Board;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport { gameFinalStates, resetBoard, gameWon } from '../features/board/boardSlice';\n\nconst DialogWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  width: 400px;\n`;\n\nconst DialogContentTextWrapper = styled.div`\n  font-size: 40px;\n  color: ${props => props.gameState === gameWon ? \"green\" : \"red\"};\n`;\n\nconst ButtonsRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n`;\n\nexport const GameEndedDialog = ({gameState}) => {\n  const dispatch = useDispatch();\n  const playerName = useSelector(state => state.additionalData.playerName);\n  const [open, setOpen] = React.useState(false);\n\n  useEffect(() => {\n    setOpen(gameFinalStates.includes(gameState));\n  }, [gameState])\n\n  return (\n    <Dialog\n      open={open}\n      onClose={() => setOpen(false)}\n    >\n      <DialogWrapper>\n        <DialogTitle>{`Hey there ${playerName}`}</DialogTitle>\n        <DialogContentTextWrapper gameState={gameState}>\n          {`YOU ${gameState}`}\n        </DialogContentTextWrapper>\n        {gameState === gameWon && 'your score will be added to the score board'}\n        <ButtonsRow>\n          <Button onClick={() => dispatch(resetBoard())} style={{ margin: '10px' }}>\n            back to lobby\n          </Button>\n          <Button onClick={() => setOpen(false)} style={{ margin: '10px' }}>\n            back to board\n          </Button>\n        </ButtonsRow>\n      </DialogWrapper>\n    </Dialog>\n  );\n}\n\nexport default GameEndedDialog;","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport { FaHourglassHalf } from 'react-icons/fa';\n\nimport { endGame } from '../features/additionalData/additionalInfoSlice';\nimport { gameFinalStates, gameWon, gamePreRunning, gameOnConfigurations } from '../features/board/boardSlice';\nimport TopInfoBar from '../components/TopInfo';\nimport ChooseBoard from '../components/ChooseBoard/index';\nimport Board from '../components/Board/Board';\nimport GameEndedDialog from '../components/GameEndedDialog';\n\nconst MainPage = styled.div`\n  display: flex;\n  flex-direction: column;\n  user-select: none;\n  \n  height: 100%;\n  width: 100%;\n`;\n\nconst LoadingWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex: 1;\n  align-items: center;\n  font-size: 200px;\n  margin: auto;\n`;\n\nconst RenderSwitch = ({ gameState }) => {\n  switch ( gameState ) {\n    case gameOnConfigurations:\n      return <ChooseBoard/>;\n\n    case gamePreRunning:\n      return <LoadingWrapper><FaHourglassHalf/>Loading...</LoadingWrapper>;\n\n    default:\n      return (\n        <>\n          <TopInfoBar/>\n            <Board\n              cellSize={50}\n            />\n          <GameEndedDialog gameState={gameState}/>\n        </>\n      );\n  }\n}\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const gameState = useSelector(state => state.board.gameState);\n\n  useEffect(() => {\n    if (gameFinalStates.includes(gameState)) {\n      dispatch(endGame({ isGameWon: gameState === gameWon }));\n    }\n  }, [dispatch, gameState])\n\n  return (\n    <MainPage>\n      <RenderSwitch gameState={gameState}/>\n    </MainPage>\n  );\n}\n\nexport default App;\n","import { combineReducers } from '@reduxjs/toolkit';\nimport additionalDataReducer from '../features/additionalData/additionalInfoSlice';\nimport boardReducer from '../features/board/boardSlice';\nimport { persistReducer} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\n\nexport const rootReducer = combineReducers({\n  additionalData: persistReducer(persistConfig, additionalDataReducer),\n  board: boardReducer\n});\n\nexport default rootReducer;","import { configureStore } from '@reduxjs/toolkit';\nimport { persistStore } from 'redux-persist';\n\nimport rootReducer from './rootReducer';\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: false,\n      immutableCheck: false,\n    })\n});\n\nexport const persistor = persistStore(store);\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./rootReducer', () => {\n    const newRootReducer = require('./rootReducer').default;\n    store.replaceReducer(newRootReducer);\n  })\n}\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport store, { persistor } from './app/store'\nimport { setIsFlagMode } from './features/board/boardSlice';\n\nimport './index.css';\n\nconst targetKey = 'Shift'\n\nconst pressHandler = ( key, isKeyPressed) => {\n  if (key === targetKey) {\n    const state = store.getState();\n    if (state.board.isFlagMode !== isKeyPressed) {\n      store.dispatch(setIsFlagMode(isKeyPressed));\n    }\n  }\n};\n\nwindow.addEventListener('keydown', (event) => pressHandler(event.key, true));\nwindow.addEventListener('keyup', (event) => pressHandler(event.key, false));\n\nconst render = () => {\n  const App = require('./app/App').default\n\n  ReactDOM.render(\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>,\n    document.getElementById('root')\n  )\n}\n\nrender()\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./app/App', render)\n}","import { createSlice } from '@reduxjs/toolkit';\nimport moment from 'moment';\nimport lodash from 'lodash';\n\nimport { calculateDiffToNow } from '../../utils/TimeUtils';\n\nexport const dafaultPlayerName = 'Unknown Player';\n\nconst initialState = {\n  /** Previus games best score **/\n  bestScores: {},\n  gameBeginningTime: null,\n  isSupermanMode: false,\n  gameMode: null,\n  playerName: dafaultPlayerName,\n};\n\nconst additionalDataSlice = createSlice({\n  name: 'additionalData',\n  initialState,\n  reducers: {\n    startGame(state, action) {\n      const { gameMode } = action.payload\n      state.isSupermanMode = false;\n      state.gameMode = gameMode;\n      state.gameBeginningTime = moment().toISOString();\n    },\n\n    endGame(state, action) {\n      const { isGameWon } = action.payload\n      if (isGameWon) {\n        const defaultValue = {}\n        defaultValue[state.gameMode] = [];\n        const bestScores = lodash.defaults(state.bestScores, defaultValue)\n        bestScores[state.gameMode].push({ playerName: state.playerName, time: calculateDiffToNow(moment(state.gameBeginningTime)) })\n        /** save best 10: **/\n        bestScores[state.gameMode] = lodash.sortBy(bestScores[state.gameMode], (obj) => obj.time).slice(0, 25);\n        state.bestScores = bestScores;\n      }\n    },\n\n    setSupermanMode(state, action) {\n      const { isSupermanMode } = action.payload\n      state.isSupermanMode = isSupermanMode;\n    },\n\n    changePlayerName(state, action) {\n      const playerName = action.payload;\n      state.playerName = [null, \"\"].includes(playerName) ? dafaultPlayerName : playerName;\n    }\n  }\n})\n\nexport const {\n  startGame,\n  endGame,\n  setSupermanMode,\n  changePlayerName\n} = additionalDataSlice.actions;\n\nexport default additionalDataSlice.reducer;","import moment from 'moment';\n\n\nexport const calculateDiffToNow = beginningTime => {\n  /** Return ms diff between the beginning and now **/\n  return moment.duration(moment().diff(beginningTime)).asMilliseconds();\n};\n\nexport const getTimerAsText = ms => {\n  return ms && moment.utc(ms).format('HH:mm:ss');\n};","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport lodash from 'lodash';\n\nimport { FaFlag, FaBorderAll } from 'react-icons/fa';\n\nimport { createBoard, gamePreRunning, setGameState } from '../../../features/board/boardSlice';\nimport { startGame } from '../../../features/additionalData/additionalInfoSlice';\nimport ScoreDisplay from '../../ScoreDisplay/ScoreDisplay';\n\nconst BoardOptionWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  cursor: ${props => props.isClickable && \"pointer\" };\n\n  height: 125px;\n  width: 300px;\n  border-radius: 20px;\n  font-size: 20px;\n  background-color: #c2c2c2;\n\n  margin: 10px;\n`;\n\nconst CustomOptionWrapper = styled(BoardOptionWrapper)`\n  width: 400px;\n`;\n\nconst BoardContentWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-around;\n  padding-top: 2px;\n  margin: 2px;\n`;\n\nconst InputText = styled.input`\n  height: 20px;\n  width: 50px;\n  background-color: white;\n  outline: none;\n  border-width: 0;\n  border-radius: 5px;\n  text-align: center;\n  margin-left: 5px;\n  margin-right: 5px;\n  color: ${props => props.isTextValid ? 'black' : 'red'};\n`;\n\nconst isPositiveNumber = str => Number.isInteger(lodash.toNumber(str)) && parseInt(str) > 0;\n\nconst NumericStyledInput = ({ onChangeHandler }) => {\n  const [isTextValid, setIsTextValid] = useState(true);\n\n  const onChange = event => {\n    const newValue = event.target.value;\n    const isValueValid = isPositiveNumber(newValue) || [\"\", null].includes(newValue);\n    setIsTextValid(isValueValid);\n    if ( isValueValid ) {\n      onChangeHandler(parseInt(newValue));\n    } else {\n      onChangeHandler(null);\n    }\n  }\n\n  return (\n    <InputText \n      onChange={onChange} \n      isTextValid={isTextValid}\n      onClick={event => event.stopPropagation()}\n    />\n  )\n}\n\nconst BestScore = ({ gameMode }) => {\n  const bestScores = useSelector(state => state.additionalData.bestScores[gameMode]);\n  const bestScore = lodash.head(bestScores);\n\n  return (\n    bestScore ? ( <ScoreDisplay {...bestScore}/> ) : null\n  )\n\n}\n\nexport const CastumBoardOption = () => {\n  const dispatch = useDispatch();\n  const [height, setHeight] = useState(null);\n  const [width, setWidth] = useState(null);\n  const [flagAmount, setFlagAmount] = useState(null);\n  const modeName = 'Custom Mode';\n  const fullGameMode = `${modeName} ${height}X${width}/${flagAmount}`;\n  const isClickable = Boolean(height && width && flagAmount);\n  \n  return (\n    <CustomOptionWrapper \n      isClickable={isClickable}\n      onClick={() => {\n        if ( isClickable ) {\n          dispatch(setGameState(gamePreRunning));\n          setImmediate(() => {\n            dispatch(createBoard({height, width, flagAmount}));\n            dispatch(startGame({ gameMode: fullGameMode}));\n          });\n        }\n      }}\n      style={{ backgroundColor: isClickable && \"#a8d0a8\" }}\n    >\n      {\"Custom Mode\"}\n      <BoardContentWrapper>\n        <FaFlag/>\n        <NumericStyledInput onChangeHandler={setFlagAmount}/>\n        <div style={{ width: \"20px\" }}/>\n        <FaBorderAll/>\n        <NumericStyledInput onChangeHandler={setHeight}/>\n        {'X'}\n        <NumericStyledInput onChangeHandler={setWidth}/>\n      </BoardContentWrapper>\n      <BestScore gameMode={fullGameMode}/>\n    </CustomOptionWrapper>\n  )\n}\n\nconst BoardOption = ({ modeName, height, width, flagAmount }) => {\n  const dispatch = useDispatch();\n  const fullGameMode = `${modeName} ${height}X${width}/${flagAmount}`;\n\n  return (\n    <BoardOptionWrapper \n      isClickable\n      onClick={() => {\n        dispatch(setGameState(gamePreRunning));\n        setImmediate(() => {\n          dispatch(createBoard({height, width, flagAmount}));\n          dispatch(startGame({ gameMode: fullGameMode }));\n        });\n      }}\n    >\n      {modeName}\n      <BoardContentWrapper>\n        <FaFlag style={{ marginRight: \"5px\" }}/>\n        {flagAmount}\n        <div style={{ width: \"20px\" }}/>\n        <FaBorderAll style={{ marginRight: \"5px\" }}/>\n        {`${height} X ${width}`}\n      </BoardContentWrapper>\n      <BestScore gameMode={fullGameMode}/>\n    </BoardOptionWrapper>\n  )\n}\n\nexport default BoardOption;","import React from 'react';\nimport styled from 'styled-components';\nimport { FaTrophy, FaChild } from 'react-icons/fa';\n\nimport { getTimerAsText } from '../../utils/TimeUtils';\n\nconst ScoreDisplayWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-around;\n  padding-top: 2px;\n  margin: 2px;\n`;\n\nconst ScoreDisplay = ({ playerName, time }) => {\n  return (\n    <ScoreDisplayWrapper>\n      <FaTrophy style={{ marginRight: \"5px\" }}/>\n      { getTimerAsText(time) }\n      <div style={{ width: \"20px\" }}/>\n      <FaChild/>\n      { playerName }\n    </ScoreDisplayWrapper>\n  )\n}\n\nexport default ScoreDisplay;"],"sourceRoot":""}